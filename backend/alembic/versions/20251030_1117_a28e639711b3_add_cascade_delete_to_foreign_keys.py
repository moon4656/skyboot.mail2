"""Add CASCADE delete to foreign keys

Revision ID: a28e639711b3
Revises: d046dec9949e
Create Date: 2025-10-30 11:17:18.037394+09:00

SkyBoot Mail SaaS 마이그레이션 스크립트
- 다중 조직 지원
- 데이터 격리 보장
- 백업 및 복원 지원
"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'a28e639711b3'
down_revision = 'd046dec9949e'
branch_labels = None
depends_on = None


def upgrade() -> None:
    """
    마이그레이션 업그레이드 실행
    
    이 함수는 데이터베이스 스키마를 새 버전으로 업그레이드합니다.
    SaaS 환경에서 조직별 데이터 격리를 유지하면서 안전하게 실행됩니다.
    """
    # ### commands auto generated by Alembic - please adjust! ###
    # Virtual 테이블들은 이미 정리되었으므로 IF EXISTS 조건으로 삭제
    op.execute("DROP TABLE IF EXISTS virtual_aliases CASCADE")
    op.execute("DROP TABLE IF EXISTS login_logs_backup CASCADE")
    op.execute("DROP TABLE IF EXISTS virtual_domains CASCADE")
    op.execute("DROP TABLE IF EXISTS virtual_users CASCADE")
    with op.batch_alter_table('contact_groups', schema=None) as batch_op:
        batch_op.drop_index('idx_contact_groups_contact_uuid')
        batch_op.drop_index('idx_contact_groups_group_id')
        batch_op.drop_index('idx_contact_groups_org_id')
        batch_op.create_index(batch_op.f('ix_contact_groups_contact_uuid'), ['contact_uuid'], unique=False)
        batch_op.create_index(batch_op.f('ix_contact_groups_group_id'), ['group_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_contact_groups_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_contact_groups_org_id'), ['org_id'], unique=False)

    with op.batch_alter_table('contacts', schema=None) as batch_op:
        batch_op.alter_column('favorite',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
        batch_op.drop_index('idx_contacts_email')
        batch_op.drop_index('idx_contacts_org_id')
        batch_op.create_index(batch_op.f('ix_contacts_contact_uuid'), ['contact_uuid'], unique=False)
        batch_op.create_index(batch_op.f('ix_contacts_email'), ['email'], unique=False)
        batch_op.create_index(batch_op.f('ix_contacts_org_id'), ['org_id'], unique=False)

    with op.batch_alter_table('departments', schema=None) as batch_op:
        batch_op.drop_index('idx_departments_org_id')
        batch_op.create_index(batch_op.f('ix_departments_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_departments_org_id'), ['org_id'], unique=False)

    with op.batch_alter_table('groups', schema=None) as batch_op:
        batch_op.drop_index('idx_groups_org_id')
        batch_op.create_index(batch_op.f('ix_groups_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_groups_org_id'), ['org_id'], unique=False)

    with op.batch_alter_table('login_logs', schema=None) as batch_op:
        batch_op.alter_column('user_id',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               comment='로그인 시도 사용자 ID')

    with op.batch_alter_table('mail_folders', schema=None) as batch_op:
        batch_op.create_foreign_key(None, 'mail_folders', ['parent_id'], ['id'])
        batch_op.create_foreign_key(None, 'mail_users', ['user_uuid'], ['user_uuid'])
        batch_op.create_foreign_key(None, 'organizations', ['org_id'], ['org_id'], ondelete='CASCADE')

    with op.batch_alter_table('mail_in_folders', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_read', sa.Boolean(), nullable=True, comment='읽음 상태'))
        batch_op.add_column(sa.Column('read_at', sa.DateTime(timezone=True), nullable=True, comment='읽은 시간'))

    with op.batch_alter_table('mail_logs', schema=None) as batch_op:
        batch_op.alter_column('org_id',
               existing_type=sa.VARCHAR(length=36),
               nullable=False,
               existing_comment='조직 ID')
        batch_op.drop_constraint('mail_logs_org_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'organizations', ['org_id'], ['org_id'], ondelete='CASCADE')

    with op.batch_alter_table('mail_users', schema=None) as batch_op:
        batch_op.create_foreign_key(None, 'organizations', ['org_id'], ['org_id'], ondelete='CASCADE')

    with op.batch_alter_table('mails', schema=None) as batch_op:
        batch_op.drop_constraint('mails_org_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'organizations', ['org_id'], ['org_id'], ondelete='CASCADE')

    with op.batch_alter_table('organization_settings', schema=None) as batch_op:
        batch_op.drop_constraint('organization_settings_org_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'organizations', ['org_id'], ['org_id'], ondelete='CASCADE')

    with op.batch_alter_table('organization_usage', schema=None) as batch_op:
        batch_op.drop_constraint('organization_usage_org_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'organizations', ['org_id'], ['org_id'], ondelete='CASCADE')

    with op.batch_alter_table('refresh_tokens', schema=None) as batch_op:
        batch_op.create_foreign_key(None, 'users', ['user_uuid'], ['user_uuid'])

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('is_2fa_enabled',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               nullable=True,
               existing_comment='2FA 활성화 여부')
        batch_op.alter_column('totp_secret',
               existing_type=sa.VARCHAR(length=32),
               comment='TOTP 시크릿 키',
               existing_comment='TOTP 시크릿 키 (암호화됨)',
               existing_nullable=True)
        batch_op.alter_column('backup_codes',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=sa.Text(),
               comment='백업 코드 JSON',
               existing_comment='백업 코드 목록 (암호화됨)',
               existing_nullable=True)
        batch_op.drop_index('idx_users_2fa_enabled')
        batch_op.drop_index('idx_users_last_2fa_at')
        batch_op.drop_constraint('users_unique_key', type_='unique')
        batch_op.create_foreign_key(None, 'organizations', ['org_id'], ['org_id'], ondelete='CASCADE')

    # ### end Alembic commands ###


def downgrade() -> None:
    """
    마이그레이션 다운그레이드 실행
    
    이 함수는 데이터베이스 스키마를 이전 버전으로 되돌립니다.
    데이터 손실을 방지하기 위해 신중하게 구현되어야 합니다.
    """
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_unique_constraint('users_unique_key', ['org_id', 'user_id'])
        batch_op.create_index('idx_users_last_2fa_at', ['last_2fa_at'], unique=False)
        batch_op.create_index('idx_users_2fa_enabled', ['is_2fa_enabled'], unique=False)
        batch_op.alter_column('backup_codes',
               existing_type=sa.Text(),
               type_=postgresql.JSON(astext_type=sa.Text()),
               comment='백업 코드 목록 (암호화됨)',
               existing_comment='백업 코드 JSON',
               existing_nullable=True)
        batch_op.alter_column('totp_secret',
               existing_type=sa.VARCHAR(length=32),
               comment='TOTP 시크릿 키 (암호화됨)',
               existing_comment='TOTP 시크릿 키',
               existing_nullable=True)
        batch_op.alter_column('is_2fa_enabled',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               nullable=False,
               existing_comment='2FA 활성화 여부')

    with op.batch_alter_table('refresh_tokens', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')

    with op.batch_alter_table('organization_usage', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('organization_usage_org_id_fkey', 'organizations', ['org_id'], ['org_id'])

    with op.batch_alter_table('organization_settings', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('organization_settings_org_id_fkey', 'organizations', ['org_id'], ['org_id'])

    with op.batch_alter_table('mails', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('mails_org_id_fkey', 'organizations', ['org_id'], ['org_id'])

    with op.batch_alter_table('mail_users', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')

    with op.batch_alter_table('mail_logs', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('mail_logs_org_id_fkey', 'organizations', ['org_id'], ['org_id'])
        batch_op.alter_column('org_id',
               existing_type=sa.VARCHAR(length=36),
               nullable=True,
               existing_comment='조직 ID')

    with op.batch_alter_table('mail_in_folders', schema=None) as batch_op:
        batch_op.drop_column('read_at')
        batch_op.drop_column('is_read')

    with op.batch_alter_table('mail_folders', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')

    with op.batch_alter_table('login_logs', schema=None) as batch_op:
        batch_op.alter_column('user_id',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               comment=None,
               existing_comment='로그인 시도 사용자 ID')

    with op.batch_alter_table('groups', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_groups_org_id'))
        batch_op.drop_index(batch_op.f('ix_groups_id'))
        batch_op.create_index('idx_groups_org_id', ['org_id'], unique=False)

    with op.batch_alter_table('departments', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_departments_org_id'))
        batch_op.drop_index(batch_op.f('ix_departments_id'))
        batch_op.create_index('idx_departments_org_id', ['org_id'], unique=False)

    with op.batch_alter_table('contacts', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_contacts_org_id'))
        batch_op.drop_index(batch_op.f('ix_contacts_email'))
        batch_op.drop_index(batch_op.f('ix_contacts_contact_uuid'))
        batch_op.create_index('idx_contacts_org_id', ['org_id'], unique=False)
        batch_op.create_index('idx_contacts_email', ['email'], unique=False)
        batch_op.alter_column('favorite',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=True)

    with op.batch_alter_table('contact_groups', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_contact_groups_org_id'))
        batch_op.drop_index(batch_op.f('ix_contact_groups_id'))
        batch_op.drop_index(batch_op.f('ix_contact_groups_group_id'))
        batch_op.drop_index(batch_op.f('ix_contact_groups_contact_uuid'))
        batch_op.create_index('idx_contact_groups_org_id', ['org_id'], unique=False)
        batch_op.create_index('idx_contact_groups_group_id', ['group_id'], unique=False)
        batch_op.create_index('idx_contact_groups_contact_uuid', ['contact_uuid'], unique=False)

    op.create_table('virtual_users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('domain_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['domain_id'], ['virtual_domains.id'], name='virtual_users_domain_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='virtual_users_pkey'),
    sa.UniqueConstraint('email', name='virtual_users_email_key')
    )
    op.create_table('virtual_domains',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('virtual_domains_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='virtual_domains_pkey'),
    sa.UniqueConstraint('name', name='virtual_domains_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('login_logs_backup',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_uuid', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('login_status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('failure_reason', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True)
    )
    op.create_table('virtual_aliases',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('domain_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('destination', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['domain_id'], ['virtual_domains.id'], name='virtual_aliases_domain_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='virtual_aliases_pkey')
    )
    # ### end Alembic commands ###


def validate_saas_constraints() -> None:
    """
    SaaS 제약 조건 검증
    
    마이그레이션 후 다음 사항을 확인합니다:
    - 조직별 데이터 격리 유지
    - 외래 키 제약 조건 유효성
    - 인덱스 성능 최적화
    """
    # 구현 필요시 여기에 검증 로직 추가
    pass


def backup_critical_data() -> None:
    """
    중요 데이터 백업
    
    마이그레이션 전 중요한 데이터를 백업합니다.
    조직별로 분리된 백업을 생성하여 데이터 격리를 유지합니다.
    """
    # 구현 필요시 여기에 백업 로직 추가
    pass