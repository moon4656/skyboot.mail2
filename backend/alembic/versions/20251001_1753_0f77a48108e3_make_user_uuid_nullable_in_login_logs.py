"""Make user_uuid nullable in login_logs

Revision ID: 0f77a48108e3
Revises: 3d3bb6444234
Create Date: 2025-10-01 17:53:43.615591+09:00

SkyBoot Mail SaaS 마이그레이션 스크립트
- 다중 조직 지원
- 데이터 격리 보장
- 백업 및 복원 지원
"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '0f77a48108e3'
down_revision = '3d3bb6444234'
branch_labels = None
depends_on = None


def upgrade() -> None:
    """
    마이그레이션 업그레이드 실행
    
    이 함수는 데이터베이스 스키마를 새 버전으로 업그레이드합니다.
    SaaS 환경에서 조직별 데이터 격리를 유지하면서 안전하게 실행됩니다.
    """
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('login_logs_backup')
    op.drop_table('virtual_domains')
    op.drop_table('virtual_aliases')
    op.drop_table('virtual_users')
    with op.batch_alter_table('login_logs', schema=None) as batch_op:
        batch_op.alter_column('user_uuid',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_comment='사용자 UUID (로그인 성공 시)')
        batch_op.alter_column('user_id',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               comment='로그인 시도 사용자 ID')

    with op.batch_alter_table('mail_folders', schema=None) as batch_op:
        batch_op.create_foreign_key(None, 'mail_folders', ['parent_id'], ['id'])
        batch_op.create_foreign_key(None, 'mail_users', ['user_uuid'], ['user_uuid'])
        batch_op.create_foreign_key(None, 'organizations', ['org_id'], ['org_id'])

    with op.batch_alter_table('mail_recipients', schema=None) as batch_op:
        batch_op.add_column(sa.Column('recipient_uuid', sa.String(length=50), nullable=True, comment='수신자 UUID (mail_users.user_uuid 참조)'))
        batch_op.create_foreign_key(None, 'mail_users', ['recipient_uuid'], ['user_uuid'])

    with op.batch_alter_table('mail_users', schema=None) as batch_op:
        batch_op.create_foreign_key(None, 'organizations', ['org_id'], ['org_id'])

    with op.batch_alter_table('refresh_tokens', schema=None) as batch_op:
        batch_op.create_foreign_key(None, 'users', ['user_uuid'], ['user_uuid'])

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_foreign_key(None, 'organizations', ['org_id'], ['org_id'])

    # ### end Alembic commands ###


def downgrade() -> None:
    """
    마이그레이션 다운그레이드 실행
    
    이 함수는 데이터베이스 스키마를 이전 버전으로 되돌립니다.
    데이터 손실을 방지하기 위해 신중하게 구현되어야 합니다.
    """
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')

    with op.batch_alter_table('refresh_tokens', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')

    with op.batch_alter_table('mail_users', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')

    with op.batch_alter_table('mail_recipients', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('recipient_uuid')

    with op.batch_alter_table('mail_folders', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')

    with op.batch_alter_table('login_logs', schema=None) as batch_op:
        batch_op.alter_column('user_id',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               comment=None,
               existing_comment='로그인 시도 사용자 ID')
        batch_op.alter_column('user_uuid',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               existing_comment='사용자 UUID (로그인 성공 시)')

    op.create_table('virtual_users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('domain_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['domain_id'], ['virtual_domains.id'], name='virtual_users_domain_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='virtual_users_pkey'),
    sa.UniqueConstraint('email', name='virtual_users_email_key')
    )
    op.create_table('virtual_aliases',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('domain_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('destination', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['domain_id'], ['virtual_domains.id'], name='virtual_aliases_domain_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='virtual_aliases_pkey')
    )
    op.create_table('virtual_domains',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='virtual_domains_pkey'),
    sa.UniqueConstraint('name', name='virtual_domains_name_key')
    )
    op.create_table('login_logs_backup',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_uuid', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('login_status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('failure_reason', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True)
    )
    # ### end Alembic commands ###


def validate_saas_constraints() -> None:
    """
    SaaS 제약 조건 검증
    
    마이그레이션 후 다음 사항을 확인합니다:
    - 조직별 데이터 격리 유지
    - 외래 키 제약 조건 유효성
    - 인덱스 성능 최적화
    """
    # 구현 필요시 여기에 검증 로직 추가
    pass


def backup_critical_data() -> None:
    """
    중요 데이터 백업
    
    마이그레이션 전 중요한 데이터를 백업합니다.
    조직별로 분리된 백업을 생성하여 데이터 격리를 유지합니다.
    """
    # 구현 필요시 여기에 백업 로직 추가
    pass