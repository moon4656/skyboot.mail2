"""
Ï°∞ÏßÅ Í¥ÄÎ¶¨ ÏÑúÎπÑÏä§

SaaS Îã§Ï§ë Ï°∞ÏßÅ ÏßÄÏõêÏùÑ ÏúÑÌïú Ï°∞ÏßÅ Í¥ÄÎ¶¨ Í∏∞Îä•
"""
import logging
import uuid
from typing import List, Optional, Dict, Any
from datetime import datetime, timezone
from sqlalchemy.orm import Session
from sqlalchemy import and_, or_, func
from fastapi import HTTPException, Depends

from ..model import Organization, User, MailUser
from ..schemas.organization_schema import (
    OrganizationCreate, OrganizationUpdate, OrganizationResponse,
    OrganizationSettings, OrganizationStats
)
from ..service.auth_service import get_password_hash
from ..config import settings
from ..database import get_db

# Î°úÍ±∞ ÏÑ§Ï†ï
logger = logging.getLogger(__name__)


class OrganizationService:
    """
    Ï°∞ÏßÅ Í¥ÄÎ¶¨ ÏÑúÎπÑÏä§ ÌÅ¥ÎûòÏä§
    
    Ï°∞ÏßÅ ÏÉùÏÑ±, ÏàòÏ†ï, ÏÇ≠Ï†ú, Ï°∞Ìöå Î∞è Í¥ÄÎ†® Í∏∞Îä•ÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.
    """
    
    def __init__(self, db: Session):
        """
        Ï°∞ÏßÅ ÏÑúÎπÑÏä§ Ï¥àÍ∏∞Ìôî
        
        Args:
            db: Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑ∏ÏÖò
        """
        self.db = db
        logger.debug("üè¢ Ï°∞ÏßÅ ÏÑúÎπÑÏä§ Ï¥àÍ∏∞Ìôî")
    
    async def create_organization(
        self, 
        org_data: OrganizationCreate,
        admin_email: str,
        admin_password: str,
        admin_name: Optional[str] = None
    ) -> OrganizationResponse:
        """
        ÏÉà Ï°∞ÏßÅ ÏÉùÏÑ±
        
        Args:
            org_data: Ï°∞ÏßÅ ÏÉùÏÑ± Îç∞Ïù¥ÌÑ∞
            admin_email: Í¥ÄÎ¶¨Ïûê Ïù¥Î©îÏùº
            admin_password: Í¥ÄÎ¶¨Ïûê ÎπÑÎ∞ÄÎ≤àÌò∏
            admin_name: Í¥ÄÎ¶¨Ïûê Ïù¥Î¶Ñ
            
        Returns:
            ÏÉùÏÑ±Îêú Ï°∞ÏßÅ Ï†ïÎ≥¥
            
        Raises:
            HTTPException: Ï°∞ÏßÅ ÏÉùÏÑ± Ïã§Ìå® Ïãú
        """
        try:
            logger.info(f"üè¢ Ï°∞ÏßÅ ÏÉùÏÑ± ÏãúÏûë: {org_data.name}")
            
            # 1. org_id ÏûêÎèô ÏÉùÏÑ± (UUID)
            org_id = str(uuid.uuid4())
            logger.info(f"üìã ÏûêÎèô ÏÉùÏÑ±Îêú Ï°∞ÏßÅ ID: {org_id}")
            
            # 2. Ï°∞ÏßÅÎ™Ö Ï§ëÎ≥µ ÌôïÏù∏
            existing_org = self.db.query(Organization).filter(
                Organization.name == org_data.name
            ).first()
            
            if existing_org:
                raise HTTPException(
                    status_code=400,
                    detail=f"Ï°∞ÏßÅÎ™Ö '{org_data.name}'Ïù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§."
                )
            
            # 3. org_code Ï§ëÎ≥µ ÌôïÏù∏
            existing_org_code = self.db.query(Organization).filter(
                Organization.org_code == org_data.org_code
            ).first()
            
            if existing_org_code:
                raise HTTPException(
                    status_code=400,
                    detail=f"Ï°∞ÏßÅ ÏΩîÎìú '{org_data.org_code}'Í∞Ä Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§."
                )
            
            # 4. subdomain Ï§ëÎ≥µ ÌôïÏù∏
            existing_subdomain = self.db.query(Organization).filter(
                Organization.subdomain == org_data.subdomain
            ).first()
            
            if existing_subdomain:
                raise HTTPException(
                    status_code=400,
                    detail=f"ÏÑúÎ∏åÎèÑÎ©îÏù∏ '{org_data.subdomain}'Ïù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§."
                )
            
            # 5. ÎèÑÎ©îÏù∏ Ï§ëÎ≥µ ÌôïÏù∏ (ÎèÑÎ©îÏù∏Ïù¥ Ï†úÍ≥µÎêú Í≤ΩÏö∞)
            if org_data.domain:
                existing_domain = self.db.query(Organization).filter(
                    Organization.domain == org_data.domain
                ).first()
                
                if existing_domain:
                    raise HTTPException(
                        status_code=400,
                        detail=f"ÎèÑÎ©îÏù∏ '{org_data.domain}'Ïù¥ Ïù¥ÎØ∏ ÏÇ¨Ïö© Ï§ëÏûÖÎãàÎã§."
                    )
            
            # 6. Ï°∞ÏßÅ ÏÉùÏÑ± (ÌïúÍ∏Ä Î¨∏ÏûêÏó¥ UTF-8 Ï≤òÎ¶¨)
            # ÌïúÍ∏Ä Î¨∏ÏûêÏó¥ÏùÑ Î™ÖÏãúÏ†ÅÏúºÎ°ú UTF-8Î°ú Ïù∏ÏΩîÎî©/ÎîîÏΩîÎî©ÌïòÏó¨ Ï≤òÎ¶¨
            org_name = org_data.name.encode('utf-8').decode('utf-8') if org_data.name else None
            org_description = org_data.description.encode('utf-8').decode('utf-8') if org_data.description else None
            admin_name_utf8 = admin_name.encode('utf-8').decode('utf-8') if admin_name else None
            
            new_org = Organization(
                org_id=org_id,
                org_code=org_data.org_code,
                subdomain=org_data.subdomain,
                name=org_name,
                domain=org_data.domain,
                description=org_description,
                admin_email=admin_email,
                admin_name=admin_name_utf8,
                max_users=org_data.max_users or settings.DEFAULT_MAX_USERS_PER_ORG,
                max_storage_gb=org_data.max_storage_gb or settings.DEFAULT_MAX_STORAGE_PER_ORG,
                is_active=True
            )
            
            self.db.add(new_org)
            self.db.flush()  # ID ÏÉùÏÑ±ÏùÑ ÏúÑÌï¥ flush
            
            logger.info(f"‚úÖ Ï°∞ÏßÅ ÏÉùÏÑ± ÏôÑÎ£å: {new_org.name} (ID: {new_org.org_id})")
            
            # 4. Í¥ÄÎ¶¨Ïûê Í≥ÑÏ†ï ÏÉùÏÑ±
            admin_user = await self._create_admin_user(
                org_id=new_org.org_id,
                email=admin_email,
                password=admin_password,
                full_name=admin_name or f"{org_data.name} Í¥ÄÎ¶¨Ïûê"
            )
            
            # 5. Í∏∞Î≥∏ Î©îÏùº ÏÇ¨Ïö©Ïûê ÏÉùÏÑ±
            await self._create_mail_user(
                user_id=admin_user.user_id,
                org_id=new_org.org_id,
                email=admin_email
            )
            
            # 6. Í∏∞Î≥∏ ÏÑ§Ï†ï Ï†ÅÏö©
            await self._apply_default_settings(new_org.org_id)
            
            self.db.commit()
            
            logger.info(f"üéâ Ï°∞ÏßÅ '{new_org.name}' ÏÉùÏÑ± Î∞è Ï¥àÍ∏∞Ìôî ÏôÑÎ£å")
            
            return OrganizationResponse(
                org_id=new_org.org_id,
                org_code=new_org.org_code,
                subdomain=new_org.subdomain,
                admin_email=new_org.admin_email,
                name=new_org.name,
                domain=new_org.domain,
                description=new_org.description,
                is_active=new_org.is_active,
                max_users=new_org.max_users,
                max_storage_gb=new_org.max_storage_gb,
                created_at=new_org.created_at,
                updated_at=new_org.updated_at
            )
            
        except HTTPException:
            self.db.rollback()
            raise
        except Exception as e:
            self.db.rollback()
            logger.error(f"‚ùå Ï°∞ÏßÅ ÏÉùÏÑ± Ïò§Î•ò: {str(e)}")
            raise HTTPException(
                status_code=500,
                detail=f"Ï°∞ÏßÅ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {str(e)}"
            )
    
    async def get_organization(self, org_id: str) -> Optional[OrganizationResponse]:
        """
        Ï°∞ÏßÅ Ï†ïÎ≥¥ Ï°∞Ìöå
        
        Args:
            org_id: Ï°∞ÏßÅ ID
            
        Returns:
            Ï°∞ÏßÅ Ï†ïÎ≥¥ ÎòêÎäî None
        """
        try:
            org = self.db.query(Organization).filter(
                Organization.org_id == org_id,
                Organization.is_active == True
            ).first()
            
            if not org:
                return None
            
            # ÏÑ§Ï†ïÏùÑ ÎîïÏÖîÎÑàÎ¶¨Î°ú Î≥ÄÌôò
            settings_dict = {}
            if hasattr(org, 'settings') and org.settings:
                # org.settingsÍ∞Ä Î¶¨Ïä§Ìä∏Ïù∏ Í≤ΩÏö∞ (OrganizationSettings Í∞ùÏ≤¥Îì§)
                if isinstance(org.settings, list):
                    for setting in org.settings:
                        settings_dict[setting.setting_key] = setting.setting_value
                # org.settingsÍ∞Ä Îã®Ïùº Í∞ùÏ≤¥Ïù∏ Í≤ΩÏö∞
                elif hasattr(org.settings, 'setting_key'):
                    settings_dict[org.settings.setting_key] = org.settings.setting_value
                # org.settingsÍ∞Ä Ïù¥ÎØ∏ ÎîïÏÖîÎÑàÎ¶¨Ïù∏ Í≤ΩÏö∞
                elif isinstance(org.settings, dict):
                    settings_dict = org.settings
            
            return OrganizationResponse(
                org_id=org.org_id,
                org_code=org.org_code,
                subdomain=org.subdomain,
                admin_email=org.admin_email,
                name=org.name,
                domain=org.domain,
                description=org.description,
                is_active=org.is_active,
                max_users=org.max_users,
                max_storage_gb=org.max_storage_gb,
                settings=settings_dict,
                created_at=org.created_at,
                updated_at=org.updated_at
            )
            
        except Exception as e:
            logger.error(f"‚ùå Ï°∞ÏßÅ Ï°∞Ìöå Ïò§Î•ò: {str(e)}")
            return None
    
    async def get_organization_by_id(self, org_id: str) -> Optional[OrganizationResponse]:
        """
        IDÎ°ú Ï°∞ÏßÅ Ï†ïÎ≥¥ Ï°∞Ìöå
        
        Args:
            org_id: Ï°∞ÏßÅ ID
            
        Returns:
            Ï°∞ÏßÅ Ï†ïÎ≥¥ ÎòêÎäî None
        """
        try:
            org = self.db.query(Organization).filter(
                Organization.org_id == org_id,
                Organization.is_active == True
            ).first()
            
            if not org:
                return None
            
            return OrganizationResponse(
                org_id=org.org_id,
                org_code=org.org_code,
                subdomain=org.subdomain,
                admin_email=org.admin_email,
                name=org.name,
                domain=org.domain,
                description=org.description,
                is_active=org.is_active,
                max_users=org.max_users,
                max_storage_gb=org.max_storage_gb,
                created_at=org.created_at,
                updated_at=org.updated_at
            )
            
        except Exception as e:
            logger.error(f"‚ùå Ï°∞ÏßÅ UUID Ï°∞Ìöå Ïò§Î•ò: {str(e)}")
            return None
    
    async def list_organizations(
        self, 
        skip: int = 0, 
        limit: int = 100,
        search: Optional[str] = None,
        is_active: Optional[bool] = None
    ) -> List[OrganizationResponse]:
        """
        Ï°∞ÏßÅ Î™©Î°ù Ï°∞Ìöå (ÏÑ±Îä• ÏµúÏ†ÅÌôî)
        
        Args:
            skip: Í±¥ÎÑàÎõ∏ Í∞úÏàò
            limit: Ï°∞ÌöåÌï† Í∞úÏàò
            search: Í≤ÄÏÉâÏñ¥ (Ï°∞ÏßÅÎ™Ö, ÎèÑÎ©îÏù∏)
            is_active: ÌôúÏÑ± ÏÉÅÌÉú ÌïÑÌÑ∞
            
        Returns:
            Ï°∞ÏßÅ Î™©Î°ù
        """
        try:
            query = self.db.query(Organization)
            
            # ÌôúÏÑ± ÏÉÅÌÉú ÌïÑÌÑ∞
            if is_active is not None:
                query = query.filter(Organization.is_active == is_active)
            
            # Í≤ÄÏÉâ ÌïÑÌÑ∞
            if search:
                search_filter = or_(
                    Organization.name.ilike(f"%{search}%"),
                    Organization.domain.ilike(f"%{search}%"),
                    Organization.description.ilike(f"%{search}%")
                )
                query = query.filter(search_filter)
            
            # Ï†ïÎ†¨ Î∞è ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò (Ïù∏Îç±Ïä§ ÌôúÏö©ÏùÑ ÏúÑÌï¥ org_id Í∏∞Ï§Ä Ï†ïÎ†¨Î°ú Î≥ÄÍ≤Ω)
            orgs = query.order_by(Organization.org_code.desc()).offset(skip).limit(limit).all()
            
            return [
                OrganizationResponse(
                    org_id=org.org_id,
                    org_code=org.org_code,
                    subdomain=org.subdomain,
                    admin_email=org.admin_email,
                    name=org.name,
                    domain=org.domain,
                    description=org.description,
                    is_active=org.is_active,
                    max_users=org.max_users,
                    max_storage_gb=org.max_storage_gb,
                    created_at=org.created_at,
                    updated_at=org.updated_at
                )
                for org in orgs
            ]
            
        except Exception as e:
            logger.error(f"‚ùå Ï°∞ÏßÅ Î™©Î°ù Ï°∞Ìöå Ïò§Î•ò: {str(e)}")
            return []
    
    async def update_organization(
        self, 
        org_id: str, 
        org_data: OrganizationUpdate
    ) -> Optional[OrganizationResponse]:
        """
        Ï°∞ÏßÅ Ï†ïÎ≥¥ ÏàòÏ†ï
        
        Args:
            org_id: Ï°∞ÏßÅ ID
            org_data: ÏàòÏ†ïÌï† Îç∞Ïù¥ÌÑ∞
            
        Returns:
            ÏàòÏ†ïÎêú Ï°∞ÏßÅ Ï†ïÎ≥¥ ÎòêÎäî None
            
        Raises:
            HTTPException: ÏàòÏ†ï Ïã§Ìå® Ïãú
        """
        try:
            org = self.db.query(Organization).filter(
                Organization.org_id == org_id
            ).first()
            
            if not org:
                raise HTTPException(
                    status_code=404,
                    detail="Ï°∞ÏßÅÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."
                )
            
            # ÏàòÏ†ï Í∞ÄÎä•Ìïú ÌïÑÎìú ÏóÖÎç∞Ïù¥Ìä∏
            update_data = org_data.dict(exclude_unset=True)
            
            for field, value in update_data.items():
                if hasattr(org, field):
                    setattr(org, field, value)
            
            org.updated_at = datetime.now(timezone.utc)
            
            self.db.commit()
            
            logger.info(f"‚úÖ Ï°∞ÏßÅ ÏàòÏ†ï ÏôÑÎ£å: {org.name} (ID: {org.org_id})")
            
            return OrganizationResponse(
                org_id=org.org_id,
                org_code=org.org_code,
                subdomain=org.subdomain,
                admin_email=org.admin_email,
                name=org.name,
                domain=org.domain,
                description=org.description,
                is_active=org.is_active,
                max_users=org.max_users,
                max_storage_gb=org.max_storage_gb,
                created_at=org.created_at,
                updated_at=org.updated_at
            )
            
        except HTTPException:
            self.db.rollback()
            raise
        except Exception as e:
            self.db.rollback()
            logger.error(f"‚ùå Ï°∞ÏßÅ ÏàòÏ†ï Ïò§Î•ò: {str(e)}")
            raise HTTPException(
                status_code=500,
                detail=f"Ï°∞ÏßÅ ÏàòÏ†ï Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {str(e)}"
            )
    
    async def delete_organization(self, org_id: str, force: bool = False) -> bool:
        """
        Ï°∞ÏßÅ ÏÇ≠Ï†ú (ÏÜåÌîÑÌä∏ ÏÇ≠Ï†ú ÎòêÎäî ÌïòÎìú ÏÇ≠Ï†ú)
        
        Args:
            org_id: Ï°∞ÏßÅ ID
            force: Í∞ïÏ†ú ÏÇ≠Ï†ú Ïó¨Î∂Ä (ÌïòÎìú ÏÇ≠Ï†ú)
            
        Returns:
            ÏÇ≠Ï†ú ÏÑ±Í≥µ Ïó¨Î∂Ä
            
        Raises:
            HTTPException: ÏÇ≠Ï†ú Ïã§Ìå® Ïãú
        """
        try:
            org = self.db.query(Organization).filter(
                Organization.org_id == org_id
            ).first()
            
            if not org:
                raise HTTPException(
                    status_code=404,
                    detail="Ï°∞ÏßÅÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."
                )
            
            # ÏÇ¨Ïö©Ïûê Ïàò ÌôïÏù∏
            user_count = self.db.query(User).filter(User.org_id == org_id).count()
            
            if user_count > 1 and not force:  # Í¥ÄÎ¶¨Ïûê Ï†úÏô∏ÌïòÍ≥† ÏÇ¨Ïö©ÏûêÍ∞Ä ÏûàÏúºÎ©¥
                raise HTTPException(
                    status_code=400,
                    detail="Ï°∞ÏßÅÏóê ÏÇ¨Ïö©ÏûêÍ∞Ä ÏûàÏñ¥ ÏÇ≠Ï†úÌï† Ïàò ÏóÜÏäµÎãàÎã§. Í∞ïÏ†ú ÏÇ≠Ï†úÎ•º ÏõêÌïòÎ©¥ force=trueÎ•º ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî."
                )
            
            if force:
                # ÌïòÎìú ÏÇ≠Ï†ú - Î™®Îì† Í¥ÄÎ†® Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
                logger.warning(f"üóëÔ∏è Ï°∞ÏßÅ ÌïòÎìú ÏÇ≠Ï†ú ÏãúÏûë: {org.name} (ID: {org.org_id})")
                
                # Í¥ÄÎ†® Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†úÎäî Ïô∏Îûò ÌÇ§ CASCADEÎ°ú Ï≤òÎ¶¨Îê®
                self.db.delete(org)
                
            else:
                # ÏÜåÌîÑÌä∏ ÏÇ≠Ï†ú - ÎπÑÌôúÏÑ±Ìôî
                logger.info(f"üîí Ï°∞ÏßÅ ÏÜåÌîÑÌä∏ ÏÇ≠Ï†ú: {org.name} (ID: {org.org_id})")
                org.is_active = False
                org.updated_at = datetime.now(timezone.utc)
            
            self.db.commit()
            
            logger.info(f"‚úÖ Ï°∞ÏßÅ ÏÇ≠Ï†ú ÏôÑÎ£å: {org.name}")
            return True
            
        except HTTPException:
            self.db.rollback()
            raise
        except Exception as e:
            self.db.rollback()
            logger.error(f"‚ùå Ï°∞ÏßÅ ÏÇ≠Ï†ú Ïò§Î•ò: {str(e)}")
            raise HTTPException(
                status_code=500,
                detail=f"Ï°∞ÏßÅ ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: {str(e)}"
            )
    
    async def get_organization_stats(self, org_id: str) -> Optional[OrganizationStats]:
        """
        Ï°∞ÏßÅ ÌÜµÍ≥Ñ Ï†ïÎ≥¥ Ï°∞Ìöå
        
        Args:
            org_id: Ï°∞ÏßÅ ID
            
        Returns:
            Ï°∞ÏßÅ ÌÜµÍ≥Ñ Ï†ïÎ≥¥ ÎòêÎäî None
        """
        try:
            org = self.db.query(Organization).filter(
                Organization.org_id == org_id,
                Organization.is_active == True
            ).first()
            
            if not org:
                return None
            
            # ÏÇ¨Ïö©Ïûê Ïàò Ï°∞Ìöå
            total_users = self.db.query(User).filter(User.org_id == org_id).count()
            active_users = self.db.query(User).filter(
                User.org_id == org_id,
                User.is_active == True
            ).count()
            
            # Î©îÏùº ÏÇ¨Ïö©Ïûê Ïàò Ï°∞Ìöå
            mail_users = self.db.query(MailUser).filter(MailUser.org_id == org_id).count()
            
            # Ï†ÄÏû• Í≥µÍ∞Ñ ÏÇ¨Ïö©Îüâ Ï°∞Ìöå
            storage_used = self.db.query(MailUser).filter(
                MailUser.org_id == org_id
            ).with_entities(
                func.sum(MailUser.storage_used_mb).label('total_used')
            ).scalar() or 0
            
            return OrganizationStats(
                org_id=org_id,
                total_users=total_users,
                active_users=active_users,
                mail_users=mail_users,
                storage_used_mb=int(storage_used),
                storage_limit_mb=org.max_storage_gb * 1024,
                storage_usage_percent=round((storage_used / (org.max_storage_gb * 1024)) * 100, 2) if org.max_storage_gb > 0 else 0,
                user_usage_percent=round((total_users / org.max_users) * 100, 2) if org.max_users > 0 else 0
            )
            
        except Exception as e:
            logger.error(f"‚ùå Ï°∞ÏßÅ ÌÜµÍ≥Ñ Ï°∞Ìöå Ïò§Î•ò: {str(e)}")
            return None

    async def count_organizations(
        self, 
        search: Optional[str] = None,
        is_active: Optional[bool] = None
    ) -> int:
        """
        Ï°∞ÏßÅ Í∞úÏàò Ï°∞Ìöå
        
        Args:
            search: Í≤ÄÏÉâÏñ¥
            is_active: ÌôúÏÑ± ÏÉÅÌÉú ÌïÑÌÑ∞
            
        Returns:
            Ï°∞ÏßÅ Í∞úÏàò
        """
        try:
            query = self.db.query(Organization)
            
            # Í≤ÄÏÉâ Ï°∞Í±¥ Ï†ÅÏö©
            if search:
                search_filter = or_(
                    Organization.name.ilike(f"%{search}%"),
                    Organization.domain.ilike(f"%{search}%")
                )
                query = query.filter(search_filter)
            
            # ÌôúÏÑ± ÏÉÅÌÉú ÌïÑÌÑ∞
            if is_active is not None:
                query = query.filter(Organization.is_active == is_active)
            
            return query.count()
            
        except Exception as e:
            logger.error(f"‚ùå Ï°∞ÏßÅ Í∞úÏàò Ï°∞Ìöå Ïò§Î•ò: {str(e)}")
            return 0

    async def get_detailed_organization_stats(self, org_id: str):
        """
        ÏÉÅÏÑ∏ Ï°∞ÏßÅ ÌÜµÍ≥Ñ Ï†ïÎ≥¥ Ï°∞Ìöå
        
        Args:
            org_id: Ï°∞ÏßÅ ID
            
        Returns:
            ÏÉÅÏÑ∏ ÌÜµÍ≥Ñ Ï†ïÎ≥¥ (OrganizationStatsResponse ÌòïÌÉú)
        """
        try:
            # Ï°∞ÏßÅ Ï†ïÎ≥¥ Ï°∞Ìöå
            org_response = await self.get_organization(org_id)
            if not org_response:
                return None
            
            # ÌÜµÍ≥Ñ Ï†ïÎ≥¥ Ï°∞Ìöå
            stats = await self.get_organization_stats(org_id)
            if not stats:
                return None
            
            from ..schemas.organization_schema import OrganizationStatsResponse
            return OrganizationStatsResponse(
                organization=org_response,
                stats=stats
            )
            
        except Exception as e:
            logger.error(f"‚ùå ÏÉÅÏÑ∏ Ï°∞ÏßÅ ÌÜµÍ≥Ñ Ï°∞Ìöå Ïò§Î•ò: {str(e)}")
            return None

    async def get_organization_settings(self, org_id: str):
        """
        Ï°∞ÏßÅ ÏÑ§Ï†ï Ï°∞Ìöå
        
        Args:
            org_id: Ï°∞ÏßÅ ID
            
        Returns:
            Ï°∞ÏßÅ ÏÑ§Ï†ï Ï†ïÎ≥¥ (OrganizationSettingsResponse ÌòïÌÉú)
        """
        try:
            # Ï°∞ÏßÅ Ï†ïÎ≥¥ Ï°∞Ìöå
            org_response = await self.get_organization(org_id)
            if not org_response:
                return None
            
            # ÏÑ§Ï†ï Ï†ïÎ≥¥Îäî Ï°∞ÏßÅÏùò settings ÌïÑÎìúÏóêÏÑú Í∞ÄÏ†∏Ïò§Í±∞ÎÇò Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©
            from ..schemas.organization_schema import OrganizationSettings, OrganizationSettingsResponse
            
            org = self.db.query(Organization).filter(
                Organization.org_id == org_id,
                Organization.is_active == True
            ).first()
            
            if not org:
                return None
            
            # Í∏∞Î≥∏ ÏÑ§Ï†ï ÏÉùÏÑ±
            settings = OrganizationSettings()
            
            # Ï°∞ÏßÅÏùò settingsÏóêÏÑú Í∞íÏù¥ ÏûàÏúºÎ©¥ ÎçÆÏñ¥Ïì∞Í∏∞
            if org.settings:
                # org.settingsÎäî OrganizationSettings Í∞ùÏ≤¥Îì§Ïùò Î¶¨Ïä§Ìä∏
                settings_dict = {}
                if isinstance(org.settings, list):
                    for setting in org.settings:
                        if hasattr(setting, 'setting_key') and hasattr(setting, 'setting_value'):
                            settings_dict[setting.setting_key] = setting.setting_value
                
                # ÎîïÏÖîÎÑàÎ¶¨Ïùò Í∞íÎì§ÏùÑ OrganizationSettings Í∞ùÏ≤¥Ïùò ÏÜçÏÑ±ÏúºÎ°ú ÏÑ§Ï†ï
                for key, value in settings_dict.items():
                    if hasattr(settings, key):
                        # ÌÉÄÏûÖ Î≥ÄÌôò Ï≤òÎ¶¨
                        if key in ['mail_retention_days', 'max_attachment_size_mb', 'backup_retention_days']:
                            try:
                                setattr(settings, key, int(value))
                            except (ValueError, TypeError):
                                pass  # Í∏∞Î≥∏Í∞í Ïú†ÏßÄ
                        elif key in ['spam_filter_enabled', 'virus_scan_enabled', 'mail_encryption_enabled', 
                                   'backup_enabled', 'email_notifications', 'sms_notifications', 
                                   'two_factor_auth', 'ip_whitelist_enabled', 'webmail_enabled', 
                                   'mobile_app_enabled', 'api_access_enabled']:
                            try:
                                setattr(settings, key, str(value).lower() in ['true', '1', 'yes', 'on'])
                            except (ValueError, TypeError):
                                pass  # Í∏∞Î≥∏Í∞í Ïú†ÏßÄ
                        else:
                            setattr(settings, key, value)
            
            return OrganizationSettingsResponse(
                organization=org_response,
                settings=settings
            )
            
        except Exception as e:
            logger.error(f"‚ùå Ï°∞ÏßÅ ÏÑ§Ï†ï Ï°∞Ìöå Ïò§Î•ò: {str(e)}")
            return None

    async def update_organization_settings(self, org_id: str, settings_update):
        """
        Ï°∞ÏßÅ ÏÑ§Ï†ï ÏàòÏ†ï
        
        Args:
            org_id: Ï°∞ÏßÅ ID
            settings_update: ÏàòÏ†ïÌï† ÏÑ§Ï†ï Ï†ïÎ≥¥
            
        Returns:
            ÏàòÏ†ïÎêú ÏÑ§Ï†ï Ï†ïÎ≥¥ (OrganizationSettingsResponse ÌòïÌÉú)
        """
        try:
            org = self.db.query(Organization).filter(
                Organization.org_id == org_id,
                Organization.is_active == True
            ).first()
            
            if not org:
                return None
            
            # ÌòÑÏû¨ ÏÑ§Ï†ï Í∞ÄÏ†∏Ïò§Í∏∞
            current_settings = org.settings or {}
            
            # ÏóÖÎç∞Ïù¥Ìä∏Ìï† ÏÑ§Ï†ï Ï†ÅÏö©
            update_data = settings_update.dict(exclude_unset=True)
            current_settings.update(update_data)
            
            # ÏÑ§Ï†ï Ï†ÄÏû•
            org.settings = current_settings
            org.updated_at = datetime.now(timezone.utc)
            
            self.db.commit()
            
            # ÏóÖÎç∞Ïù¥Ìä∏Îêú ÏÑ§Ï†ï Î∞òÌôò
            return await self.get_organization_settings(org_id)
            
        except Exception as e:
            self.db.rollback()
            logger.error(f"‚ùå Ï°∞ÏßÅ ÏÑ§Ï†ï ÏàòÏ†ï Ïò§Î•ò: {str(e)}")
            return None
    
    async def _create_admin_user(
        self, 
        org_id: str, 
        email: str, 
        password: str, 
        full_name: str
    ):
        """
        Í¥ÄÎ¶¨Ïûê ÏÇ¨Ïö©Ïûê ÏÉùÏÑ±
        
        Args:
            org_id: Ï°∞ÏßÅ ID
            email: Ïù¥Î©îÏùº
            password: ÎπÑÎ∞ÄÎ≤àÌò∏
            full_name: Ï†ÑÏ≤¥ Ïù¥Î¶Ñ
            
        Returns:
            ÏÉùÏÑ±Îêú ÏÇ¨Ïö©Ïûê
        """
        user_uuid = str(uuid.uuid4())
        user_id = f"admin_{uuid.uuid4().hex[:8]}"  # Í¥ÄÎ¶¨Ïûê ÏÇ¨Ïö©Ïûê ID ÏÉùÏÑ±
        password_hash = get_password_hash(password)
        
        admin_user = User(
            user_id=user_id,
            user_uuid=user_uuid,
            org_id=org_id,
            username=email.split('@')[0],  # Ïù¥Î©îÏùºÏùò Î°úÏª¨ Î∂ÄÎ∂ÑÏùÑ ÏÇ¨Ïö©ÏûêÎ™ÖÏúºÎ°ú
            email=email,
            hashed_password=password_hash,
            is_active=True,
            role="admin",
            created_at=datetime.now(timezone.utc),
            updated_at=datetime.now(timezone.utc)
        )
        
        self.db.add(admin_user)
        self.db.flush()
        
        logger.info(f"‚úÖ Í¥ÄÎ¶¨Ïûê ÏÇ¨Ïö©Ïûê ÏÉùÏÑ±: {email} (ID: {admin_user.user_id})")
        return admin_user
    
    async def _create_mail_user(self, user_id: int, org_id: str, email: str):
        """
        Î©îÏùº ÏÇ¨Ïö©Ïûê ÏÉùÏÑ±
        
        Args:
            user_id: ÏÇ¨Ïö©Ïûê ID
            org_id: Ï°∞ÏßÅ ID
            email: Ïù¥Î©îÏùº
            
        Returns:
            ÏÉùÏÑ±Îêú Î©îÏùº ÏÇ¨Ïö©Ïûê
        """
        # ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï°∞Ìöå
        user = self.db.query(User).filter(User.user_id == user_id).first()
        if not user:
            raise ValueError("ÏÇ¨Ïö©ÏûêÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
        
        mail_user = MailUser(
            user_id=user_id,
            org_id=org_id,
            user_uuid=user.user_uuid,
            email=email,
            password_hash=user.hashed_password,
            display_name=user.username,  # ÏÇ¨Ïö©ÏûêÎ™ÖÏùÑ ÌëúÏãú Ïù¥Î¶ÑÏúºÎ°ú ÏÇ¨Ïö©
            is_active=True,
            storage_used_mb=0  # ÏÇ¨Ïö© Ï§ëÏù∏ Ï†ÄÏû• Ïö©Îüâ Ï¥àÍ∏∞Ìôî
        )
        
        self.db.add(mail_user)
        self.db.flush()
        
        logger.info(f"‚úÖ Î©îÏùº ÏÇ¨Ïö©Ïûê ÏÉùÏÑ±: {email} (ID: {mail_user.user_id})")
        return mail_user
    
    async def _apply_default_settings(self, org_id: str) -> None:
        """
        Í∏∞Î≥∏ ÏÑ§Ï†ï Ï†ÅÏö©
        
        Args:
            org_id: Ï°∞ÏßÅ ID
        """
        try:
            # Í∏∞Î≥∏ Î©îÏùº Ìè¥Îçî ÏÉùÏÑ± Îì±Ïùò Ï¥àÍ∏∞Ìôî ÏûëÏóÖ
            # Ïã§Ï†ú Íµ¨ÌòÑÏùÄ Î©îÏùº ÏÑúÎπÑÏä§ÏóêÏÑú Ï≤òÎ¶¨
            logger.info(f"‚úÖ Ï°∞ÏßÅ Í∏∞Î≥∏ ÏÑ§Ï†ï Ï†ÅÏö© ÏôÑÎ£å: {org_id}")
            
        except Exception as e:
            logger.error(f"‚ùå Í∏∞Î≥∏ ÏÑ§Ï†ï Ï†ÅÏö© Ïò§Î•ò: {str(e)}")


def get_organization_service(db: Session = Depends(get_db)) -> OrganizationService:
    """
    Ï°∞ÏßÅ ÏÑúÎπÑÏä§ Ïù∏Ïä§ÌÑ¥Ïä§ Î∞òÌôò
    
    Args:
        db: Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑ∏ÏÖò
        
    Returns:
        Ï°∞ÏßÅ ÏÑúÎπÑÏä§ Ïù∏Ïä§ÌÑ¥Ïä§
    """
    return OrganizationService(db)