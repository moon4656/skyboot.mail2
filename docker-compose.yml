version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: skyboot_postgres
    environment:
      POSTGRES_DB: skyboot_mail
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - skyboot_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Postfix 메일 서버
  postfix:
    image: catatnight/postfix:latest
    container_name: skyboot_postfix
    environment:
      maildomain: localhost
      smtp_user: admin:admin123
    ports:
      - "25:25"
    volumes:
      - postfix_data:/var/spool/postfix
      - ./logs/postfix:/var/log
    networks:
      - skyboot_network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "25"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI 백엔드
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: skyboot_backend
    environment:
      # 데이터베이스 설정
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/skyboot_mail
      
      # JWT 설정
      SECRET_KEY: your-super-secret-key-change-in-production
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      REFRESH_TOKEN_EXPIRE_DAYS: 7
      
      # SMTP 설정 (Postfix)
      SMTP_HOST: postfix
      SMTP_PORT: 25
      SMTP_USERNAME: admin
      SMTP_PASSWORD: admin123
      SMTP_FROM_EMAIL: noreply@localhost
      SMTP_FROM_NAME: SkyBoot Mail
      
      # 애플리케이션 설정
      DEBUG: true
      CORS_ORIGINS: http://localhost:5173,http://127.0.0.1:5173
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./logs/backend:/app/logs
    networks:
      - skyboot_network
    depends_on:
      postgres:
        condition: service_healthy
      postfix:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Vue.js 프론트엔드
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: skyboot_frontend
    ports:
      - "80:80"
    networks:
      - skyboot_network
    depends_on:
      - backend
    restart: unless-stopped

  # Redis (선택사항 - 세션 관리용)
  redis:
    image: redis:7-alpine
    container_name: skyboot_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - skyboot_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

# 네트워크 설정
networks:
  skyboot_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 볼륨 설정
volumes:
  postgres_data:
    driver: local
  postfix_data:
    driver: local
  redis_data:
    driver: local